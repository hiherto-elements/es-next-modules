[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "punycode/punycode.js",
    "content": "/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, fn) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = fn(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(string, fn) {\n\tconst parts = string.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = `${parts[0]}@`;\n\t\tstring = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tstring = string.replace(regexSeparators, '\\x2E');\n\tconst labels = string.split('.');\n\tconst encoded = map(labels, fn).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = array => String.fromCodePoint(...array);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = codePoint => {\n\tif (codePoint - 0x30 < 0x0A) {\n\t\treturn codePoint - 0x16;\n\t}\n\tif (codePoint - 0x41 < 0x1A) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint - 0x61 < 0x1A) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = (digit, flag) => //  0..25 map to ASCII a..z or A..Z\n// 26..35 map to ASCII 0..9\ndigit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = (delta, numPoints, firstTime) => {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = input => {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tlet oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = input => {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tlet inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tlet basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue == n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = input => mapDomain(input, string => regexPunycode.test(string)\n    ? decode(string.slice(4).toLowerCase())\n    : string);\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = input => mapDomain(input, string => regexNonASCII.test(string)\n    ? `xn--${encode(string)}`\n    : string);\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nexport const punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.1.0',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport default punycode;\n",
    "static": true,
    "longname": "/Users/sebs/projects/opensource/es-next-modules/packages/punycode/punycode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "name": "maxInt",
    "memberof": "punycode/punycode.js",
    "static": true,
    "longname": "punycode/punycode.js~maxInt",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": "Highest positive signed 32-bit float value",
    "lineNumber": 2,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "name": "base",
    "memberof": "punycode/punycode.js",
    "static": true,
    "longname": "punycode/punycode.js~base",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": "Bootstring parameters",
    "lineNumber": 5,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "name": "tMin",
    "memberof": "punycode/punycode.js",
    "static": true,
    "longname": "punycode/punycode.js~tMin",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "name": "tMax",
    "memberof": "punycode/punycode.js",
    "static": true,
    "longname": "punycode/punycode.js~tMax",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 5,
    "kind": "variable",
    "name": "skew",
    "memberof": "punycode/punycode.js",
    "static": true,
    "longname": "punycode/punycode.js~skew",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 6,
    "kind": "variable",
    "name": "damp",
    "memberof": "punycode/punycode.js",
    "static": true,
    "longname": "punycode/punycode.js~damp",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 7,
    "kind": "variable",
    "name": "initialBias",
    "memberof": "punycode/punycode.js",
    "static": true,
    "longname": "punycode/punycode.js~initialBias",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 8,
    "kind": "variable",
    "name": "initialN",
    "memberof": "punycode/punycode.js",
    "static": true,
    "longname": "punycode/punycode.js~initialN",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 9,
    "kind": "variable",
    "name": "delimiter",
    "memberof": "punycode/punycode.js",
    "static": true,
    "longname": "punycode/punycode.js~delimiter",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 10,
    "kind": "variable",
    "name": "regexPunycode",
    "memberof": "punycode/punycode.js",
    "static": true,
    "longname": "punycode/punycode.js~regexPunycode",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": "Regular expressions",
    "lineNumber": 15,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 11,
    "kind": "variable",
    "name": "regexNonASCII",
    "memberof": "punycode/punycode.js",
    "static": true,
    "longname": "punycode/punycode.js~regexNonASCII",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 12,
    "kind": "variable",
    "name": "regexSeparators",
    "memberof": "punycode/punycode.js",
    "static": true,
    "longname": "punycode/punycode.js~regexSeparators",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 13,
    "kind": "variable",
    "name": "errors",
    "memberof": "punycode/punycode.js",
    "static": true,
    "longname": "punycode/punycode.js~errors",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": "Error messages",
    "lineNumber": 20,
    "type": {
      "types": [
        "{\"overflow\": string, \"not-basic\": string, \"invalid-input\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 14,
    "kind": "variable",
    "name": "baseMinusTMin",
    "memberof": "punycode/punycode.js",
    "static": true,
    "longname": "punycode/punycode.js~baseMinusTMin",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": "Convenience shortcuts",
    "lineNumber": 27,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 15,
    "kind": "variable",
    "name": "floor",
    "memberof": "punycode/punycode.js",
    "static": true,
    "longname": "punycode/punycode.js~floor",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 16,
    "kind": "variable",
    "name": "stringFromCharCode",
    "memberof": "punycode/punycode.js",
    "static": true,
    "longname": "punycode/punycode.js~stringFromCharCode",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 17,
    "kind": "function",
    "name": "error",
    "memberof": "punycode/punycode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "punycode/punycode.js~error",
    "access": "private",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": "A generic error utility function.",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Error} Throws a `RangeError` with the applicable error message."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The error type."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": "Throws a `RangeError` with the applicable error message."
    },
    "ignore": true
  },
  {
    "__docId__": 18,
    "kind": "function",
    "name": "map",
    "memberof": "punycode/punycode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "punycode/punycode.js~map",
    "access": "private",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": "A generic `Array#map` utility function.",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} A new array of values returned by the callback function."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "The array to iterate over."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The function that gets called for every array\nitem."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A new array of values returned by the callback function."
    },
    "ignore": true
  },
  {
    "__docId__": 19,
    "kind": "function",
    "name": "mapDomain",
    "memberof": "punycode/punycode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "punycode/punycode.js~mapDomain",
    "access": "private",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": "A simple `Array#map`-like wrapper to work with domain name strings or email\naddresses.",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} A new string of characters returned by the callback\nfunction."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "domain",
        "description": "The domain name or email address."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The function that gets called for every\ncharacter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A new string of characters returned by the callback\nfunction."
    },
    "ignore": true
  },
  {
    "__docId__": 20,
    "kind": "function",
    "name": "ucs2decode",
    "memberof": "punycode/punycode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "punycode/punycode.js~ucs2decode",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": "Creates an array containing the numeric code points of each Unicode\ncharacter in the string. While JavaScript uses UCS-2 internally,\nthis function will convert a pair of surrogate halves (each of which\nUCS-2 exposes as separate characters) into a single code point,\nmatching UTF-16.",
    "see": [
      "`punycode.ucs2.encode`",
      "<https://mathiasbynens.be/notes/javascript-encoding>"
    ],
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "punycode.ucs2"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array} The new array of code points."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "string",
        "description": "The Unicode input string (UCS-2)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The new array of code points."
    },
    "ignore": true
  },
  {
    "__docId__": 21,
    "kind": "function",
    "name": "ucs2encode",
    "memberof": "punycode/punycode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "punycode/punycode.js~ucs2encode",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": "Creates a string based on an array of numeric code points.",
    "see": [
      "`punycode.ucs2.decode`"
    ],
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "punycode.ucs2"
      },
      {
        "tagName": "@returns",
        "tagValue": "{String} The new Unicode string (UCS-2)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "codePoints",
        "description": "The array of numeric code points."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The new Unicode string (UCS-2)."
    },
    "ignore": true
  },
  {
    "__docId__": 22,
    "kind": "function",
    "name": "basicToDigit",
    "memberof": "punycode/punycode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "punycode/punycode.js~basicToDigit",
    "access": "private",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": "Converts a basic code point into a digit/integer.",
    "see": [
      "`digitToBasic()`"
    ],
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} The numeric value of a basic code point (for use in\nrepresenting integers) in the range `0` to `base - 1`, or `base` if\nthe code point does not represent a value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "codePoint",
        "description": "The basic numeric code point value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The numeric value of a basic code point (for use in\nrepresenting integers) in the range `0` to `base - 1`, or `base` if\nthe code point does not represent a value."
    },
    "ignore": true
  },
  {
    "__docId__": 23,
    "kind": "function",
    "name": "digitToBasic",
    "memberof": "punycode/punycode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "punycode/punycode.js~digitToBasic",
    "access": "private",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": "Converts a digit/integer into a basic code point.",
    "see": [
      "`basicToDigit()`"
    ],
    "lineNumber": 166,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} The basic code point whose value (when used for\nrepresenting integers) is `digit`, which needs to be in the range\n`0` to `base - 1`. If `flag` is non-zero, the uppercase form is\nused; else, the lowercase form is used. The behavior is undefined\nif `flag` is non-zero and `digit` has no uppercase form."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "digit",
        "description": "The numeric value of a basic code point."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The basic code point whose value (when used for\nrepresenting integers) is `digit`, which needs to be in the range\n`0` to `base - 1`. If `flag` is non-zero, the uppercase form is\nused; else, the lowercase form is used. The behavior is undefined\nif `flag` is non-zero and `digit` has no uppercase form."
    },
    "ignore": true
  },
  {
    "__docId__": 24,
    "kind": "function",
    "name": "adapt",
    "memberof": "punycode/punycode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "punycode/punycode.js~adapt",
    "access": "private",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": "Bias adaptation function as per section 3.4 of RFC 3492.\nhttps://tools.ietf.org/html/rfc3492#section-3.4",
    "lineNumber": 175,
    "params": [
      {
        "name": "delta",
        "types": [
          "*"
        ]
      },
      {
        "name": "numPoints",
        "types": [
          "*"
        ]
      },
      {
        "name": "firstTime",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 25,
    "kind": "function",
    "name": "decode",
    "memberof": "punycode/punycode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "punycode/punycode.js~decode",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": "Converts a Punycode string of ASCII-only symbols to a string of Unicode\nsymbols.",
    "lineNumber": 192,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "punycode"
      },
      {
        "tagName": "@returns",
        "tagValue": "{String} The resulting string of Unicode symbols."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "The Punycode string of ASCII-only symbols."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The resulting string of Unicode symbols."
    },
    "ignore": true
  },
  {
    "__docId__": 26,
    "kind": "function",
    "name": "encode",
    "memberof": "punycode/punycode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "punycode/punycode.js~encode",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": "Converts a string of Unicode symbols (e.g. a domain name label) to a\nPunycode string of ASCII-only symbols.",
    "lineNumber": 283,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "punycode"
      },
      {
        "tagName": "@returns",
        "tagValue": "{String} The resulting Punycode string of ASCII-only symbols."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "The string of Unicode symbols."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The resulting Punycode string of ASCII-only symbols."
    },
    "ignore": true
  },
  {
    "__docId__": 27,
    "kind": "function",
    "name": "toUnicode",
    "memberof": "punycode/punycode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "punycode/punycode.js~toUnicode",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": "Converts a Punycode string representing a domain name or an email address\nto Unicode. Only the Punycoded parts of the input will be converted, i.e.\nit doesn't matter if you call it on a string that has already been\nconverted to Unicode.",
    "lineNumber": 382,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "punycode"
      },
      {
        "tagName": "@returns",
        "tagValue": "{String} The Unicode representation of the given Punycode\nstring."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "The Punycoded domain name or email address to\nconvert to Unicode."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The Unicode representation of the given Punycode\nstring."
    },
    "ignore": true
  },
  {
    "__docId__": 28,
    "kind": "function",
    "name": "toASCII",
    "memberof": "punycode/punycode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "punycode/punycode.js~toASCII",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": null,
    "description": "Converts a Unicode string representing a domain name or an email address to\nPunycode. Only the non-ASCII parts of the domain name will be converted,\ni.e. it doesn't matter if you call it with a domain that's already in\nASCII.",
    "lineNumber": 397,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "punycode"
      },
      {
        "tagName": "@returns",
        "tagValue": "{String} The Punycode representation of the given domain name or\nemail address."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "The domain name or email address to convert, as a\nUnicode string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The Punycode representation of the given domain name or\nemail address."
    },
    "ignore": true
  },
  {
    "__docId__": 29,
    "kind": "variable",
    "name": "punycode",
    "memberof": "punycode/punycode.js",
    "static": true,
    "longname": "punycode/punycode.js~punycode",
    "access": "public",
    "export": true,
    "importPath": "@hiherto-elements/punycode/punycode/punycode.js",
    "importStyle": "{punycode}",
    "description": "Define the public API",
    "lineNumber": 404,
    "type": {
      "types": [
        "{\"version\": string, \"ucs2\": *, \"decode\": *, \"encode\": *, \"toASCII\": *, \"toUnicode\": *}"
      ]
    }
  },
  {
    "__docId__": 30,
    "kind": "file",
    "name": "punycode/test/punycode.js",
    "content": "\nimport { Assert as assert } from '../node_modules/@hiherto-elements/assert/Assert.js';\nimport { punycode } from '../punycode.js';\nassert.object(punycode); \n\nconst testData = {\n\t'strings': [\n\t\t{\n\t\t\t'description': 'a single basic code point',\n\t\t\t'decoded': 'Bach',\n\t\t\t'encoded': 'Bach-'\n\t\t},\n\t\t{\n\t\t\t'description': 'a single non-ASCII character',\n\t\t\t'decoded': '\\xFC',\n\t\t\t'encoded': 'tda'\n\t\t},\n\t\t{\n\t\t\t'description': 'multiple non-ASCII characters',\n\t\t\t'decoded': '\\xFC\\xEB\\xE4\\xF6\\u2665',\n\t\t\t'encoded': '4can8av2009b'\n\t\t},\n\t\t{\n\t\t\t'description': 'mix of ASCII and non-ASCII characters',\n\t\t\t'decoded': 'b\\xFCcher',\n\t\t\t'encoded': 'bcher-kva'\n\t\t},\n\t\t{\n\t\t\t'description': 'long string with both ASCII and non-ASCII characters',\n\t\t\t'decoded': 'Willst du die Bl\\xFCthe des fr\\xFChen, die Fr\\xFCchte des sp\\xE4teren Jahres',\n\t\t\t'encoded': 'Willst du die Blthe des frhen, die Frchte des spteren Jahres-x9e96lkal'\n\t\t},\n\t\t// https://tools.ietf.org/html/rfc3492#section-7.1\n\t\t{\n\t\t\t'description': 'Arabic (Egyptian)',\n\t\t\t'decoded': '\\u0644\\u064A\\u0647\\u0645\\u0627\\u0628\\u062A\\u0643\\u0644\\u0645\\u0648\\u0634\\u0639\\u0631\\u0628\\u064A\\u061F',\n\t\t\t'encoded': 'egbpdaj6bu4bxfgehfvwxn'\n\t\t},\n\t\t{\n\t\t\t'description': 'Chinese (simplified)',\n\t\t\t'decoded': '\\u4ED6\\u4EEC\\u4E3A\\u4EC0\\u4E48\\u4E0D\\u8BF4\\u4E2d\\u6587',\n\t\t\t'encoded': 'ihqwcrb4cv8a8dqg056pqjye'\n\t\t},\n\t\t{\n\t\t\t'description': 'Chinese (traditional)',\n\t\t\t'decoded': '\\u4ED6\\u5011\\u7232\\u4EC0\\u9EBD\\u4E0D\\u8AAA\\u4E2D\\u6587',\n\t\t\t'encoded': 'ihqwctvzc91f659drss3x8bo0yb'\n\t\t},\n\t\t{\n\t\t\t'description': 'Czech',\n\t\t\t'decoded': 'Pro\\u010Dprost\\u011Bnemluv\\xED\\u010Desky',\n\t\t\t'encoded': 'Proprostnemluvesky-uyb24dma41a'\n\t\t},\n\t\t{\n\t\t\t'description': 'Hebrew',\n\t\t\t'decoded': '\\u05DC\\u05DE\\u05D4\\u05D4\\u05DD\\u05E4\\u05E9\\u05D5\\u05D8\\u05DC\\u05D0\\u05DE\\u05D3\\u05D1\\u05E8\\u05D9\\u05DD\\u05E2\\u05D1\\u05E8\\u05D9\\u05EA',\n\t\t\t'encoded': '4dbcagdahymbxekheh6e0a7fei0b'\n\t\t},\n\t\t{\n\t\t\t'description': 'Hindi (Devanagari)',\n\t\t\t'decoded': '\\u092F\\u0939\\u0932\\u094B\\u0917\\u0939\\u093F\\u0928\\u094D\\u0926\\u0940\\u0915\\u094D\\u092F\\u094B\\u0902\\u0928\\u0939\\u0940\\u0902\\u092C\\u094B\\u0932\\u0938\\u0915\\u0924\\u0947\\u0939\\u0948\\u0902',\n\t\t\t'encoded': 'i1baa7eci9glrd9b2ae1bj0hfcgg6iyaf8o0a1dig0cd'\n\t\t},\n\t\t{\n\t\t\t'description': 'Japanese (kanji and hiragana)',\n\t\t\t'decoded': '\\u306A\\u305C\\u307F\\u3093\\u306A\\u65E5\\u672C\\u8A9E\\u3092\\u8A71\\u3057\\u3066\\u304F\\u308C\\u306A\\u3044\\u306E\\u304B',\n\t\t\t'encoded': 'n8jok5ay5dzabd5bym9f0cm5685rrjetr6pdxa'\n\t\t},\n\t\t{\n\t\t\t'description': 'Korean (Hangul syllables)',\n\t\t\t'decoded': '\\uC138\\uACC4\\uC758\\uBAA8\\uB4E0\\uC0AC\\uB78C\\uB4E4\\uC774\\uD55C\\uAD6D\\uC5B4\\uB97C\\uC774\\uD574\\uD55C\\uB2E4\\uBA74\\uC5BC\\uB9C8\\uB098\\uC88B\\uC744\\uAE4C',\n\t\t\t'encoded': '989aomsvi5e83db1d2a355cv1e0vak1dwrv93d5xbh15a0dt30a5jpsd879ccm6fea98c'\n\t\t},\n\t\t/**\n\t\t * As there's no way to do it in JavaScript, Punycode.js doesn't support\n\t\t * mixed-case annotation (which is entirely optional as per the RFC).\n\t\t * So, while the RFC sample string encodes to:\n\t\t * `b1abfaaepdrnnbgefbaDotcwatmq2g4l`\n\t\t * Without mixed-case annotation it has to encode to:\n\t\t * `b1abfaaepdrnnbgefbadotcwatmq2g4l`\n\t\t * https://github.com/bestiejs/punycode.js/issues/3\n\t\t */\n\t\t{\n\t\t\t'description': 'Russian (Cyrillic)',\n\t\t\t'decoded': '\\u043F\\u043E\\u0447\\u0435\\u043C\\u0443\\u0436\\u0435\\u043E\\u043D\\u0438\\u043D\\u0435\\u0433\\u043E\\u0432\\u043E\\u0440\\u044F\\u0442\\u043F\\u043E\\u0440\\u0443\\u0441\\u0441\\u043A\\u0438',\n\t\t\t'encoded': 'b1abfaaepdrnnbgefbadotcwatmq2g4l'\n\t\t},\n\t\t{\n\t\t\t'description': 'Spanish',\n\t\t\t'decoded': 'Porqu\\xE9nopuedensimplementehablarenEspa\\xF1ol',\n\t\t\t'encoded': 'PorqunopuedensimplementehablarenEspaol-fmd56a'\n\t\t},\n\t\t{\n\t\t\t'description': 'Vietnamese',\n\t\t\t'decoded': 'T\\u1EA1isaoh\\u1ECDkh\\xF4ngth\\u1EC3ch\\u1EC9n\\xF3iti\\u1EBFngVi\\u1EC7t',\n\t\t\t'encoded': 'TisaohkhngthchnitingVit-kjcr8268qyxafd2f1b9g'\n\t\t},\n\t\t{\n\t\t\t'decoded': '3\\u5E74B\\u7D44\\u91D1\\u516B\\u5148\\u751F',\n\t\t\t'encoded': '3B-ww4c5e180e575a65lsy2b'\n\t\t},\n\t\t{\n\t\t\t'decoded': '\\u5B89\\u5BA4\\u5948\\u7F8E\\u6075-with-SUPER-MONKEYS',\n\t\t\t'encoded': '-with-SUPER-MONKEYS-pc58ag80a8qai00g7n9n'\n\t\t},\n\t\t{\n\t\t\t'decoded': 'Hello-Another-Way-\\u305D\\u308C\\u305E\\u308C\\u306E\\u5834\\u6240',\n\t\t\t'encoded': 'Hello-Another-Way--fc4qua05auwb3674vfr0b'\n\t\t},\n\t\t{\n\t\t\t'decoded': '\\u3072\\u3068\\u3064\\u5C4B\\u6839\\u306E\\u4E0B2',\n\t\t\t'encoded': '2-u9tlzr9756bt3uc0v'\n\t\t},\n\t\t{\n\t\t\t'decoded': 'Maji\\u3067Koi\\u3059\\u308B5\\u79D2\\u524D',\n\t\t\t'encoded': 'MajiKoi5-783gue6qz075azm5e'\n\t\t},\n\t\t{\n\t\t\t'decoded': '\\u30D1\\u30D5\\u30A3\\u30FCde\\u30EB\\u30F3\\u30D0',\n\t\t\t'encoded': 'de-jg4avhby1noc0d'\n\t\t},\n\t\t{\n\t\t\t'decoded': '\\u305D\\u306E\\u30B9\\u30D4\\u30FC\\u30C9\\u3067',\n\t\t\t'encoded': 'd9juau41awczczp'\n\t\t},\n\t\t/**\n\t\t * This example is an ASCII string that breaks the existing rules for host\n\t\t * name labels. (It's not a realistic example for IDNA, because IDNA never\n\t\t * encodes pure ASCII labels.)\n\t\t */\n\t\t{\n\t\t\t'description': 'ASCII string that breaks the existing rules for host-name labels',\n\t\t\t'decoded': '-> $1.00 <-',\n\t\t\t'encoded': '-> $1.00 <--'\n\t\t}\n\t],\n\t'ucs2': [\n\t\t// Every Unicode symbol is tested separately. These are just the extra\n\t\t// tests for symbol combinations:\n\t\t{\n\t\t\t'description': 'Consecutive astral symbols',\n\t\t\t'decoded': [127829, 119808, 119558, 119638],\n\t\t\t'encoded': '\\uD83C\\uDF55\\uD835\\uDC00\\uD834\\uDF06\\uD834\\uDF56'\n\t\t},\n\t\t{\n\t\t\t'description': 'U+D800 (high surrogate) followed by non-surrogates',\n\t\t\t'decoded': [55296, 97, 98],\n\t\t\t'encoded': '\\uD800ab'\n\t\t},\n\t\t{\n\t\t\t'description': 'U+DC00 (low surrogate) followed by non-surrogates',\n\t\t\t'decoded': [56320, 97, 98],\n\t\t\t'encoded': '\\uDC00ab'\n\t\t},\n\t\t{\n\t\t\t'description': 'High surrogate followed by another high surrogate',\n\t\t\t'decoded': [0xD800, 0xD800],\n\t\t\t'encoded': '\\uD800\\uD800'\n\t\t},\n\t\t{\n\t\t\t'description': 'Unmatched high surrogate, followed by a surrogate pair, followed by an unmatched high surrogate',\n\t\t\t'decoded': [0xD800, 0x1D306, 0xD800],\n\t\t\t'encoded': '\\uD800\\uD834\\uDF06\\uD800'\n\t\t},\n\t\t{\n\t\t\t'description': 'Low surrogate followed by another low surrogate',\n\t\t\t'decoded': [0xDC00, 0xDC00],\n\t\t\t'encoded': '\\uDC00\\uDC00'\n\t\t},\n\t\t{\n\t\t\t'description': 'Unmatched low surrogate, followed by a surrogate pair, followed by an unmatched low surrogate',\n\t\t\t'decoded': [0xDC00, 0x1D306, 0xDC00],\n\t\t\t'encoded': '\\uDC00\\uD834\\uDF06\\uDC00'\n\t\t}\n\t],\n\t'domains': [\n\t\t{\n\t\t\t'decoded': 'ma\\xF1ana.com',\n\t\t\t'encoded': 'xn--maana-pta.com'\n\t\t},\n\t\t{ // https://github.com/bestiejs/punycode.js/issues/17\n\t\t\t'decoded': 'example.com.',\n\t\t\t'encoded': 'example.com.'\n\t\t},\n\t\t{\n\t\t\t'decoded': 'b\\xFCcher.com',\n\t\t\t'encoded': 'xn--bcher-kva.com'\n\t\t},\n\t\t{\n\t\t\t'decoded': 'caf\\xE9.com',\n\t\t\t'encoded': 'xn--caf-dma.com'\n\t\t},\n\t\t{\n\t\t\t'decoded': '\\u2603-\\u2318.com',\n\t\t\t'encoded': 'xn----dqo34k.com'\n\t\t},\n\t\t{\n\t\t\t'decoded': '\\uD400\\u2603-\\u2318.com',\n\t\t\t'encoded': 'xn----dqo34kn65z.com'\n\t\t},\n\t\t{\n\t\t\t'description': 'Emoji',\n\t\t\t'decoded': '\\uD83D\\uDCA9.la',\n\t\t\t'encoded': 'xn--ls8h.la'\n\t\t},\n\t\t{\n\t\t\t'description': 'Non-printable ASCII',\n\t\t\t'decoded': '\\0\\x01\\x02foo.bar',\n\t\t\t'encoded': '\\0\\x01\\x02foo.bar'\n\t\t},\n\t\t{\n\t\t\t'description': 'Email address',\n\t\t\t'decoded': '\\u0434\\u0436\\u0443\\u043C\\u043B\\u0430@\\u0434\\u0436p\\u0443\\u043C\\u043B\\u0430\\u0442\\u0435\\u0441\\u0442.b\\u0440\\u0444a',\n\t\t\t'encoded': '\\u0434\\u0436\\u0443\\u043C\\u043B\\u0430@xn--p-8sbkgc5ag7bhce.xn--ba-lmcq'\n\t\t}\n\t],\n\t'separators': [\n\t\t{\n\t\t\t'description': 'Using U+002E as separator',\n\t\t\t'decoded': 'ma\\xF1ana\\x2Ecom',\n\t\t\t'encoded': 'xn--maana-pta.com'\n\t\t},\n\t\t{\n\t\t\t'description': 'Using U+3002 as separator',\n\t\t\t'decoded': 'ma\\xF1ana\\u3002com',\n\t\t\t'encoded': 'xn--maana-pta.com'\n\t\t},\n\t\t{\n\t\t\t'description': 'Using U+FF0E as separator',\n\t\t\t'decoded': 'ma\\xF1ana\\uFF0Ecom',\n\t\t\t'encoded': 'xn--maana-pta.com'\n\t\t},\n\t\t{\n\t\t\t'description': 'Using U+FF61 as separator',\n\t\t\t'decoded': 'ma\\xF1ana\\uFF61com',\n\t\t\t'encoded': 'xn--maana-pta.com'\n\t\t}\n\t]\n};\n\n\nfor (let object of testData.ucs2) {\n\tconst decoded = punycode.ucs2.decode(object.encoded);\n\tconst compare = object.decoded;\n\tassert.deepEqual(\n\t\tpunycode.ucs2.decode(object.encoded),\n\t\tobject.decoded,\n\t\tobject.description\n\t);\n}\n\nconst codePoints = [0x61, 0x62, 0x63];\nconst result = punycode.ucs2.encode(codePoints);\nassert.deepEqual(result, 'abc', 'Does encode correctly');\nassert.deepEqual(codePoints, [0x61, 0x62, 0x63], 'extracts the right code points');\n\nfor (const object of testData.strings) {\n\t\tassert.deepEqual(\n\t\t\tpunycode.decode(object.encoded),\n\t\t\tobject.decoded\n\t\t);\n}\nassert.deepEqual(punycode.decode('ZZZ'), '\\u7BA5');\n\nfor (const object of testData.strings) {\n\t\tassert.deepEqual(\n\t\t\tpunycode.encode(object.decoded),\n\t\t\tobject.encoded\n\t\t);\n}\n\nfor (const object of testData.domains) {\n\t\tassert.deepEqual(\n\t\t\tpunycode.toUnicode(object.encoded),\n\t\t\tobject.decoded\n\t\t);\n}\nfor (const object of testData.strings) {\n\t\tassert.deepEqual(\n\t\t\tpunycode.toUnicode(object.encoded),\n\t\t\tobject.encoded\n\t\t);\n\t\tassert.deepEqual(\n\t\t\tpunycode.toUnicode(object.decoded),\n\t\t\tobject.decoded\n\t\t);\n}\n\n\tfor (const object of testData.domains) {\n\t\tassert.deepEqual(\n\t\t\tpunycode.toASCII(object.decoded),\n\t\t\tobject.encoded\n\t\t);\n\t}\n\tfor (const object of testData.strings) {\n\t\tassert.deepEqual(\n\t\t\tpunycode.toASCII(object.encoded),\n\t\t\tobject.encoded\n\t\t);\n\t}\n\tfor (const object of testData.separators) {\n\t\t\tassert.deepEqual(\n\t\t\t\tpunycode.toASCII(object.decoded),\n\t\t\t\tobject.encoded\n\t\t\t);\n\t}",
    "static": true,
    "longname": "/Users/sebs/projects/opensource/es-next-modules/packages/punycode/test/punycode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 31,
    "kind": "variable",
    "name": "testData",
    "memberof": "punycode/test/punycode.js",
    "static": true,
    "longname": "punycode/test/punycode.js~testData",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/test/punycode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "{\"strings\": *, \"ucs2\": *, \"domains\": *, \"separators\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 32,
    "kind": "variable",
    "name": "codePoints",
    "memberof": "punycode/test/punycode.js",
    "static": true,
    "longname": "punycode/test/punycode.js~codePoints",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/test/punycode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "type": {
      "types": [
        "number[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 33,
    "kind": "variable",
    "name": "result",
    "memberof": "punycode/test/punycode.js",
    "static": true,
    "longname": "punycode/test/punycode.js~result",
    "access": "public",
    "export": false,
    "importPath": "@hiherto-elements/punycode/punycode/test/punycode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 253,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "kind": "index",
    "content": "# @hiherto-elements/punycode\n\nA es module fork of [punycode](https://github.com/bestiejs/punycode.js)",
    "longname": "/Users/sebs/projects/opensource/es-next-modules/packages/punycode/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]